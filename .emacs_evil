;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.

(require 'package)

(setq evil-want-keybinding nil)
;;; Code:

(setq package-archives
      '(("gnu" . "http://mirrors.163.com/elpa/gnu/")
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "http://orgmode.org/elpa/")))

(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-enabled-themes '(manoj-dark))
 '(custom-safe-themes
   '("23b564cfb74d784c73167d7de1b9a067bcca00719f81e46d09ee71a12ef7ee82" default))
 '(hl-todo-keyword-faces
   '(("HOLD" . "#cfdf30")
     ("TODO" . "#feacd0")
     ("NEXT" . "#b6a0ff")
     ("THEM" . "#f78fe7")
     ("PROG" . "#00d3d0")
     ("OKAY" . "#4ae8fc")
     ("DONT" . "#80d200")
     ("FAIL" . "#ff8059")
     ("BUG" . "#ff8059")
     ("DONE" . "#44bc44")
     ("NOTE" . "#f0ce43")
     ("KLUDGE" . "#eecc00")
     ("HACK" . "#eecc00")
     ("TEMP" . "#ffcccc")
     ("FIXME" . "#ff9977")
     ("XXX+" . "#f4923b")
     ("REVIEW" . "#6ae4b9")
     ("DEPRECATED" . "#bfd9ff")))
 '(mode-line-format
   '("%e"
     (:eval
      (format winum-format
              (winum-get-number-string)))
     mode-line-front-space mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification "   " mode-line-position
     (vc-mode vc-mode)
     "  " "%m  " mode-line-misc-info mode-line-end-spaces))
 '(org-src-block-faces 'nil)
 '(package-selected-packages
   '(evil-collection evil sexy-monochrome-theme python-black smex ido-vertical-mode w3m company-arduino arduino-mode flycheck-grammarly org-inline-pdf org-preview-html flyspell-correct ivy-posframe which-key emacsql-mysql yaml-mode yaml multi-term ag yasnippet-snippets winum web-mode vterm use-package tide smart-tab slime rainbow-delimiters pug-mode prettier lsp-ui lsp-ivy js2-mode hl-todo highlight-numbers highlight-indentation highlight-indent-guides glsl-mode git-gutter+ fira-code-mode exwm exec-path-from-shell dotenv-mode desktop-environment counsel-projectile company column-enforce-mode color-identifiers-mode clang-format avy-zap))
 '(safe-local-variable-values
   '((projectile-project-run-cmd . "./lighting_tale.exe")
     (projectile-project-compilation-cmd . "make; ./lighting_tale.exe"))))

(use-package js2-mode :ensure t)
(use-package exwm :ensure t)
(use-package dotenv-mode :ensure t)
(use-package lsp-ui :ensure t)
(use-package highlight-indent-guides :ensure t)
(use-package highlight-indentation :ensure t)
(use-package git-gutter+ :ensure t)
(use-package yasnippet-snippets :ensure t)
(use-package yasnippet :ensure t)
;; (use-package company-box :ensure t)
(use-package glsl-mode :ensure t)
(use-package lsp-ivy :ensure t)
(use-package lsp-mode :ensure t)
(use-package winum :ensure t)
(use-package web-mode :ensure t)
(use-package smart-tab :ensure t)
(use-package slime :ensure t)
(use-package rainbow-delimiters :ensure t)
(use-package pug-mode :ensure t)
(use-package hl-todo :ensure t)
(use-package highlight-numbers :ensure t)
(use-package fira-code-mode :ensure t)
(use-package exec-path-from-shell :ensure t)
(use-package desktop-environment :ensure t)
(use-package counsel-projectile :ensure t)
(use-package column-enforce-mode :ensure t)
(use-package color-identifiers-mode :ensure t)
(use-package clang-format :ensure t)
(use-package avy-zap :ensure t)
(use-package evil :ensure t)
(use-package evil-collection :ensure t)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:height 119 :family "Liberation Mono"))))
 '(column-enforce-face ((t (:foreground "gray30"))))
 '(cursor ((t (:background "green"))))
 '(mode-line ((t (:background "black" :foreground "white" :box (:line-width 1 :color "cyan") :height 1.0))))
 '(mode-line-buffer-id ((t (:background "black" :foreground "yellow1" :weight bold :height 1.0))))
 '(mode-line-inactive ((t (:background "black" :foreground "white" :box (:line-width 1 :color "dim gray") :weight light :height 1.0))))
 '(rainbow-delimiters-base-face ((t (:inherit nil))))
 '(rainbow-delimiters-depth-1-face ((t (:inherit rainbow-delimiters-base-face :foreground "cyan"))))
 '(rainbow-delimiters-depth-2-face ((t (:inherit rainbow-delimiters-base-face :foreground "green"))))
 '(rainbow-delimiters-depth-3-face ((t (:inherit rainbow-delimiters-base-face :foreground "yellow"))))
 '(rainbow-delimiters-depth-4-face ((t (:inherit rainbow-delimiters-base-face :foreground "deep pink"))))
 '(rainbow-delimiters-depth-5-face ((t (:inherit rainbow-delimiters-base-face :foreground "RoyalBlue1"))))
 '(rainbow-delimiters-depth-6-face ((t (:inherit rainbow-delimiters-base-face :foreground "aquamarine"))))
 '(rainbow-delimiters-depth-7-face ((t (:inherit rainbow-delimiters-base-face :foreground "tomato"))))
 '(rainbow-delimiters-depth-8-face ((t (:inherit rainbow-delimiters-base-face :foreground "green yellow"))))
 '(rainbow-delimiters-depth-9-face ((t (:inherit rainbow-delimiters-base-face :foreground "white"))))
 '(web-mode-current-element-highlight-face ((t (:background "#000000" :foreground "red" :weight bold))))
 '(winum-face ((t (:foreground "green" :weight bold))) t))

(load-file "~/.emacs.d/functions.el")

(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)

(setq ivy-re-builders-alist
      '((swiper-isearch . ivy--regex-plus)
        (swiper-isearch-backward . ivy--regex-plus)
        (t . ivy--regex-plus)))

;; (setq ivy-initial-inputs-alist nil)

;; ui settings
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(fringe-mode 1)
(display-time-mode 1)
(display-battery-mode 1)

;; Server
(server-start)

;; Global hooks
(add-hook 'after-init-hook 'show-paren-mode)
(add-hook 'after-init-hook 'electric-pair-mode)

;; exec-path-from-shell
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))

;; Auto-revert
(global-auto-revert-mode 1)

;; disable auto-save and auto-backup
(setq auto-save-default nil)
(setq make-backup-files nil)
(setq ring-bell-function nil)

;; Hihglighting current line
(global-hl-line-mode 1)
(set-face-foreground 'hl-line nil)

(autorandr)
(winum-mode)

(setq ring-bell-function nil)
(setq avy-all-windows 'nil)
(setq avy-styles-alist '((avy-goto-char . at)))
(setq avy-orders-alist
      '((avy-goto-char . avy-order-closest)
        (avy-goto-word-0 . avy-order-closest)
        (avy-goto-line . avy-order-closest)))

(desktop-environment-mode)

(setq-default indent-tabs-mode nil)
(setq inferior-lisp-program "sbcl")

(load-file "~/secret.el")
(setq inhibit-startup-screen t)

(yas-global-mode)

(setq highlight-indent-guides-method 'character)

;; Suggestions from official docs
(setq gc-cons-threshold 100000000)
(setq lsp-completion-provider :capf)
(setq lsp-idle-delay 0.500)
(setq lsp-log-io nil)

;; Annoying stuff
(setq lsp-enable-links nil)
(setq lsp-signature-render-documentation nil)
(setq lsp-headerline-breadcrumb-enable nil)
(setq lsp-ui-doc-enable nil)
(setq lsp-completion-enable-additional-text-edit nil)

(setq lsp-ui-sideline-show-diagnostics nil)
;; (setq lsp-ui-sideline-enable nil)

(setq web-mode-enable-current-element-highlight t)

(defun vertical-split-move()
  (interactive)
  (split-window-right)
  (other-window 1))

(defun horizontal-split-move()
  (interactive)
  (split-window-below)
  (other-window 1))

(defun term-split ()
  (interactive)
  (vertical-split-move)
  (multi-term))

(use-package tide :ensure t)
(use-package company :ensure t)
(use-package flycheck :ensure t)

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
;; (add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

(require 'web-mode)

(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))

(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "tsx" (file-name-extension buffer-file-name))
              (setup-tide-mode))))

(add-hook 'web-mode-hook
          (lambda ()
            (when (string-equal "ts" (file-name-extension buffer-file-name))
              (setup-tide-mode))))


;; enable typescript - tslint checker
(flycheck-add-mode 'typescript-tslint 'web-mode)

(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))

(ivy-posframe-mode 1)

(require 'gud)
(define-key gud-minor-mode-map (kbd "<f5>") 'gud-run)
(define-key gud-minor-mode-map (kbd "<f6>") 'gud-cont)
(define-key gud-minor-mode-map (kbd "<f4>") 'gud-break)
(define-key gud-minor-mode-map (kbd "<f7>") 'gud-step)


(require 'evil)
(require 'evil-collection)

(evil-set-leader 'normal " ")

(evil-define-key 'normal 'global (kbd "<leader>w") 'delete-whitespace-and-save)
(evil-define-key 'normal 'global (kbd "<leader>g") 'counsel-ag)
(evil-define-key 'normal 'global (kbd "<leader>s") 'swiper)
(evil-define-key 'normal 'global (kbd "<leader>e") 'counsel-M-x)
(evil-define-key 'normal 'global (kbd "<leader>0") 'delete-window)
(evil-define-key 'normal 'global (kbd "<leader>1") 'delete-other-windows)
(evil-define-key 'normal 'global (kbd "<leader>2") 'horizontal-split-move)
(evil-define-key 'normal 'global (kbd "<leader>3") 'vertical-split-move)
(evil-define-key 'normal 'global (kbd "<leader>d") 'kill-current-buffer)
(evil-define-key 'normal 'global (kbd "<leader>f") 'counsel-find-file)
(evil-define-key 'normal 'global (kbd "<leader>o") 'other-window)
(evil-define-key 'normal 'global (kbd "<leader>q") 'save-buffers-kill-terminal)

(evil-collection-init)
(evil-mode 1)

(setq-default display-line-numbers-type 'visual)
(global-display-line-numbers-mode)
